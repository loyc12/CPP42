IMPORTANT : WIP, may have innacuracies or missing steps. Also, not garanteed to work for duplicate value arrays

0    : INTRO : the Ford-Johnson algorithm ( or merge-insertion sort) is an sorting algorithm that optimizes the number of comparisons by maximizing \
|              comparisons within ranges of 2n - 1 elements ( aka one less than 2^n ), which are optimal for binary searches, as they required as many \
|              comparisons as any other ranges between 2^(n-1) and (2^n) - 1 ( inclusively )
0.1  : NOTE : thus, all insertions and sorts are done via binary searches, which is optimized for ranges of size 2^n - 1, aka one less than a factor of 2
0.3  : NOTE : it is possible work with duplicates, but it neccesitates significant tweaks to the algorithm ( it should really be a bonus ngl )

1    : STEP : input an initial, unsorted array of values
1.2  : STEP : if the lenght of said array is uneven, store one of the numbers away ( we will insert it back at the end )
1.3  : STEP : pair elements together and store the pairs into a new pair array ( doesn't matter how they get paired )

2    : STEP : sort the values inside the pairs ( biggest one first is standard )
2.1  : NOTE : we will call the biggest element of a given pair Pn; Xn, and the smallest; Yn
2.2  : STEP : sort the pair array based on each pair X's value ( smallest to biggest )
2.3  : NOTE : you can used std::upper_bound() to find the right place to insert a pair in the array, as it compares the first values by defaults (aka the Xs)
2.4  : NOTE : this means Pn = [ Xn, Yn ], where Xn > Yn and Xn > X(n-1)
2.5  : NOTE : this, of course, doesn't not garantee that Yn > Y(n-1), hence the following complex sorting algorithm

3    : STEP : create a final array and store every Xn in it ( from biggest to smallest )
3.1  : STEP : put Y0 ( smallest value of P0 ) at the beginning of said final array
3.2  : EXAMPLE : the array should now look like; [ Y0, X0, X1, X2, X3, X4, X5, ... ]

==== USING THE JACKOBSTHAL SEQUENCE ====

4    : STEP : load or build the jacobsthal sequence ( 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, ... ) ( sequence where Jn = (Jn-1) + 2(Jn-2) )
4.1  : NOTE : we will call each jacobsthal element Je, where e is the index of the current jacobsthal element
4.2  : NOTE : to simplify notation when talking about the index of a pair in relation to Je, we will use e ( ex : Y(Je) -> Ye, Y( Je - 1 ) -> Y(e-1), ... )
4.3  : NOTE : as we need to insert Yn values from n = Je to n = J(e-1), we will call the previously used jacobsthal element Jp, where p = e - 1
4.4  : NOTE : to simplify notation when talking about the index of a pair in relation to Jp, we will use p ( ex : Y(Jp) -> Yp, Y( Jp + 1) -> Y(p+1), ... )

5    : vars :	e ( current jacobsthal element index )
|				p ( previous jacobsthal element index )			== e - 1
|				max_pair_index ( the n to insert from )			== Je
|				min_pair_index ( the n to stop inserting at )	== J(p)
|				insertion_range ( the numbers of elements in the final array to look at while inserting )

5.1  : NOTE : min_pair_index is used as a stop point, and is never inserted after having been reached, as it already has been in the previous loop

6    : STEP : since we already inserted Y0, we will initiate e to 2, and other variables consequently
6.1  : NOTE : the insertion range will be from the start of the final array to X(e-1) ( aka 3 long on the first loop )
6.3  : NOTE : as the iteration range is a fixed size, the final value will be kicked out of the range after each insertion \
|             this is by design, since all remaining insertion in this range are garanteed to be smaller than the kicked value

7    : STEP : take the last yet uninserted Yn in the scope [ Y(e), Y(p+1) ] and insert it right before the first value larger than it
7.1  : IMPORTANT : you need to insert the Yn values in REVERSE ORDER ( from largest index to smallest ), or the algorithm WILL break
7.2  : STEP : repeat step 7 until all yet values in the scope have been inserted
7.3  : EXAMPLE : on the first loop ( iterating over the scope [ Y2, Y1 ] ), we insert Y2, then Y1, and then finish
7.4  : EXAMPLE : this could looks like ; [ Y0, X0, X1 ] -> [ Y0, X0, Y1, (X1) ] -> [ Y0, X0, Y1 ] -> [ Y2, Y0, X0, (Y2) ] -> [ Y2, Y0, X1 ]
7.5  : NOTE : the value in parenthesis is the value that was kicked out of the range, as it is not longer needed to compare against \
|			  as all remaining values in the range are garanteed to be smaller than it. This is the core of the algorithm's optimization

8    : STEP : once you are done inserting in this range, set the min_pair_index to the current max_pair_index
8.1  : STEP : then, set the max_pair_index to the next max_pair_index ( aka J(e+1) )
8.2  : STEP : then, set the insertion range to its next value ( aka range = (range * 2) + 1 )
8.2  : EXAMPLE : at the end of the first loop, we set min_pair_index to J2 ( aka 3 ), and max_pair_index to J4 ( aka 5 )( as 5 is the next jacobsthal element )
8.3  : EXAMPLE : thus, in the second loop, we insert Y4 and Y3
8.4  : EXAMPLE : after, in the third loop, we insert Y10 to Y5
8.5  : IMPORTANT : make sure to cap the insertion range to the final array's size ( which is often not equal to 2^n - 1 )

9   : STEP : once all Yn have been inserted, insert the last remaining Yn ( if any ) into the array via a simple binary search